openapi: 3.0.3
info:
  title: Iota
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  
    You can find out more about Swagger at [https://swagger.io](https://swagger.io).
    
    Some useful links:
    - [Iota repository](https://github.com/FEUP-MEIC-ASSO-2023/G1)
    - [The source API definition for Iota](https://github.com/FEUP-MEIC-ASSO-2023/G1/tree/dev/docs/openapi.yaml)
  version: 1.0.0
tags:
  - name: devices
    description: Operations about devices
  - name: rooms
    description: Operations about rooms
  - name: categories
    description: Operations about categories
  - name: user
    description: Operations about user
paths:
  /rooms:
    post:
      tags:
        - rooms
      summary: Add a new room
      description: Add a new room
      operationId: addRoom
      requestBody:
        description: Create a new room
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'          
        '405':
          description: Invalid input
  /rooms/{roomID}:
    get:
      tags:
        - rooms
      summary: Get a room by ID
      description: ''
      operationId: getRoomByID
      parameters:
        - name: roomID
          in: path
          description: ID of room to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Room not found
    put:
      tags:
        - rooms
      summary: Update a room (its name)
      description: ''
      operationId: updateRoom
      parameters:
        - name: roomID
          in: path
          description: ID of the room to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Room'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'  
        '405':
          description: Invalid input
    delete:
      tags:
        - rooms
      summary: Delete a room
      description: ''
      operationId: deleteRoom
      parameters:
        - name: roomID
          in: path
          description: ID of room to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid room ID
  /categories/{category}:
    get:
      tags:
        - categories
      summary: Get devices of specific category
      operationId: getDevicesByCategory
      parameters:
        - name: category
          in: path
          description: Category of devices to return
          required: true
          schema:
            $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
  /devices:
    post:
      tags:
        - devices
      summary: Add a new device
      operationId: addDevice
      requestBody:
        description: Create a new device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'          
        '405':
          description: Invalid input
  /devices/{deviceID}:
    get:
      tags:
        - devices
      summary: Get a device by ID
      description: ''
      operationId: getDeviceByID
      parameters:
        - name: deviceID
          in: path
          description: ID of device to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
    put:
      tags:
        - devices
      summary: Update a device
      description: ''
      operationId: updateDevice
      parameters:
        - name: deviceID
          in: path
          description: ID of the device to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Device'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'  
        '405':
          description: Invalid input
    delete:
      tags:
        - devices
      summary: Delete a device
      description: ''
      operationId: deleteDevice
      parameters:
        - name: deviceID
          in: path
          description: ID of device to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid device ID
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '400':
          description: Invalid username/password supplied.
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Successful operation.
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      description: ''
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update a user
      description: ''
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Username of the user to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'  
        '405':
          description: Invalid input
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Category:
      type: string
      enum: 
        - light
        - media
        - climate
    Action:
      type: object
      properties:
        id:
          type: string
          example: range
        type:
          type: string
          example: range
        required:
          type: array
          description: Action's required properties
          nullable: true
          items:
            type: string
          example: ['min','max','step']
    DeviceAction:
      type: object
      properties:
        id:
          type: string
          description: Action's ID
          example: range
        name:
          type: string
          example: Brightness
        properties:
          type: object
          description: Action's required properties
          nullable: true
          example: { min: 0, max: 100, step: 0 }
        status:
          type: string
          example: 20
    Device:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: Light
        room:
          type: integer
          format: int64
          description: Room's ID
          example: 0
        actions:
          type: array
          items:
            $ref: '#/components/schemas/DeviceAction'
    Room:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    
  requestBodies:
    User:
      description: User object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Device:
      description: Device object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'
    Room:
      description: Room object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Room'
